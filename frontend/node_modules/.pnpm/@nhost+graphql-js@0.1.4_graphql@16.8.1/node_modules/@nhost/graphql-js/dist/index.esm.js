import m from "isomorphic-unfetch";
import { parse as d, print as g } from "graphql";
function y(e, r, t) {
  return e.document ? e : {
    document: e,
    variables: r,
    config: t
  };
}
function u(e) {
  var s;
  let r;
  const t = e.definitions.filter(
    (a) => a.kind === "OperationDefinition"
  );
  return t.length === 1 && (r = (s = t[0].name) == null ? void 0 : s.value), r;
}
function T(e) {
  if (typeof e == "string") {
    let t;
    try {
      const s = d(e);
      t = u(s);
    } catch {
    }
    return { query: e, operationName: t };
  }
  const r = u(e);
  return { query: g(e), operationName: r };
}
class q {
  constructor(r) {
    const { url: t, adminSecret: s } = r;
    this._url = t, this.accessToken = null, this.adminSecret = s;
  }
  async request(r, ...t) {
    const [s, a] = t, c = y(r, s, a), { headers: l, ...h } = a || {}, { query: p, operationName: f } = T(c.document);
    try {
      const o = await m(this.httpUrl, {
        method: "POST",
        body: JSON.stringify({
          operationName: f,
          query: p,
          variables: s
        }),
        headers: {
          "Content-Type": "application/json",
          ...this.generateAccessTokenHeaders(),
          ...l
        },
        ...h
      });
      if (!o.ok)
        return {
          data: null,
          error: {
            error: o.statusText,
            message: o.statusText,
            status: o.status
          }
        };
      const { data: n, errors: i } = await o.json();
      return i ? {
        data: null,
        error: i
      } : typeof n != "object" || Array.isArray(n) || n === null ? {
        data: null,
        error: {
          error: "invalid-response",
          message: "incorrect response data from GraphQL server",
          status: 0
        }
      } : { data: n, error: null };
    } catch (o) {
      const n = o;
      return {
        data: null,
        error: {
          message: n.message,
          status: n.name === "AbortError" ? 0 : 500,
          error: n.name === "AbortError" ? "abort-error" : "unknown"
        }
      };
    }
  }
  /**
   * Use `nhost.graphql.httpUrl` to get the GraphQL HTTP URL.
   * @example
   * ```ts
   * const url = nhost.graphql.httpUrl;
   * ```
   *
   * @docs https://docs.nhost.io/reference/javascript/graphql/get-http-url
   */
  get httpUrl() {
    return this._url;
  }
  /**
   * Use `nhost.graphql.wsUrl` to get the GraphQL WebSocket URL.
   * @example
   * ```ts
   * const url = nhost.graphql.wsUrl;
   * ```
   *
   * @docs https://docs.nhost.io/reference/javascript/graphql/get-ws-url
   */
  get wsUrl() {
    return this._url.replace(/^(http)(s?):\/\//, "ws$2://");
  }
  /**
   * Use `nhost.graphql.url` to get the GraphQL URL.
   * @deprecated Use `nhost.graphql.httpUrl` and `nhost.graphql.wsUrl` instead.
   */
  get url() {
    return this._url;
  }
  /**
   * Use `nhost.graphql.getUrl()` to get the GraphQL URL.
   * @deprecated Use `nhost.graphql.httpUrl` and `nhost.graphql.wsUrl` instead.
   */
  getUrl() {
    return this._url;
  }
  /**
   * Use `nhost.graphql.setAccessToken` to a set an access token to be used in subsequent graphql requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.
   *
   * @example
   * ```ts
   * nhost.graphql.setAccessToken('some-access-token')
   * ```
   *
   * @docs https://docs.nhost.io/reference/javascript/graphql/set-access-token
   */
  setAccessToken(r) {
    if (!r) {
      this.accessToken = null;
      return;
    }
    this.accessToken = r;
  }
  generateAccessTokenHeaders() {
    return this.adminSecret ? {
      "x-hasura-admin-secret": this.adminSecret
    } : this.accessToken ? {
      Authorization: `Bearer ${this.accessToken}`
    } : {};
  }
}
export {
  q as NhostGraphqlClient
};
//# sourceMappingURL=index.esm.js.map
