{"version":3,"file":"index.cjs.js","sources":["../src/utils/upload.ts","../src/hasura-storage-api.ts","../src/utils/appendImageTransformationParameters/appendImageTransformationParameters.ts","../src/hasura-storage-client.ts","../src/machines/file-upload.ts","../src/machines/multiple-files-upload.ts","../src/promises/file-upload.ts","../src/promises/multiple-files-upload.ts"],"sourcesContent":["import fetchPonyfill from 'fetch-ponyfill'\nimport FormData from 'form-data'\nimport { StorageErrorPayload, StorageUploadResponse } from './types'\n\ndeclare const EdgeRuntime: any\n\n/** Convert any string into ISO-8859-1 */\nexport const toIso88591 = (fileName: string) => {\n  try {\n    btoa(fileName)\n    return fileName\n  } catch {\n    return encodeURIComponent(fileName)\n  }\n}\n\nlet fetch = globalThis.fetch\n\nif (typeof EdgeRuntime !== 'string') {\n  fetch = fetchPonyfill().fetch\n}\n\nexport const fetchUpload = async (\n  backendUrl: string,\n  data: FormData,\n  {\n    accessToken,\n    name,\n    fileId,\n    bucketId,\n    adminSecret,\n    onUploadProgress,\n    headers: initialHeaders = {}\n  }: {\n    accessToken?: string\n    name?: string\n    fileId?: string\n    bucketId?: string\n    adminSecret?: string\n    onUploadProgress?: (event: { total: number; loaded: number }) => void\n    headers?: Record<string, string>\n  } = {}\n): Promise<StorageUploadResponse> => {\n  const headers: HeadersInit = {\n    ...initialHeaders\n  }\n  if (bucketId) {\n    data.append('bucket-id', bucketId)\n  }\n  if (adminSecret) {\n    headers['x-hasura-admin-secret'] = adminSecret\n  }\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`\n  }\n\n  const url = `${backendUrl}/files`\n  if (typeof XMLHttpRequest === 'undefined') {\n    // * Non-browser environment: XMLHttpRequest is not available\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers,\n        body: data as any // * https://github.com/form-data/form-data/issues/513\n      })\n\n      const responseData = await response.json()\n\n      if (!response.ok) {\n        const error: StorageErrorPayload = {\n          status: response.status,\n          message: responseData?.error?.message || response.statusText,\n          // * errors from hasura-storage are not codified\n          error: response.statusText\n        }\n        return { error, fileMetadata: null }\n      }\n      const fileMetadata = responseData\n      return { fileMetadata, error: null }\n    } catch (e) {\n      const error: StorageErrorPayload = {\n        status: 0,\n        message: (e as Error).message,\n        error: (e as Error).message\n      }\n      return { error, fileMetadata: null }\n    }\n  }\n\n  // * Browser environment: XMLHttpRequest is available\n  return new Promise((resolve) => {\n    let xhr = new XMLHttpRequest()\n    xhr.responseType = 'json'\n\n    xhr.onload = () => {\n      if (xhr.status < 200 || xhr.status >= 300) {\n        return resolve({\n          fileMetadata: null,\n          error: {\n            error: xhr.response?.error ?? xhr.response,\n            message: xhr.response?.error?.message ?? xhr.response,\n            status: xhr.status\n          }\n        })\n      }\n      return resolve({ fileMetadata: xhr.response, error: null })\n    }\n\n    xhr.onerror = () => {\n      // only triggers if the request couldn't be made at all e.g. network error\n      return resolve({\n        fileMetadata: null,\n        error: { error: xhr.statusText, message: xhr.statusText, status: xhr.status }\n      })\n    }\n\n    if (onUploadProgress) {\n      xhr.upload.addEventListener('progress', onUploadProgress, false)\n    }\n\n    xhr.open('POST', url, true)\n\n    Object.entries(headers).forEach(([key, value]) => {\n      xhr.setRequestHeader(key, value)\n    })\n\n    xhr.send(data as any) // * https://github.com/form-data/form-data/issues/513\n  })\n}\n","import fetchPonyfill from 'fetch-ponyfill'\nimport FormData from 'form-data'\nimport {\n  ApiDeleteParams,\n  ApiDeleteResponse,\n  ApiGetPresignedUrlParams,\n  ApiGetPresignedUrlResponse,\n  StorageUploadFileParams,\n  StorageUploadFileResponse,\n  StorageUploadFormDataParams,\n  StorageUploadFormDataResponse\n} from './utils/types'\nimport { fetchUpload } from './utils/upload'\n\nconst { fetch } = fetchPonyfill()\n\n/**\n * @internal\n * This is an internal class.\n */\nexport class HasuraStorageApi {\n  private url: string\n  private accessToken?: string\n  private adminSecret?: string\n\n  constructor({ url }: { url: string }) {\n    this.url = url\n  }\n\n  async uploadFormData({\n    formData,\n    headers,\n    bucketId\n  }: StorageUploadFormDataParams): Promise<StorageUploadFormDataResponse> {\n    const { error, fileMetadata } = await fetchUpload(this.url, formData, {\n      accessToken: this.accessToken,\n      adminSecret: this.adminSecret,\n      bucketId,\n      headers\n    })\n\n    if (error) {\n      return { fileMetadata: null, error }\n    }\n\n    if (fileMetadata && !('processedFiles' in fileMetadata)) {\n      return {\n        fileMetadata: {\n          processedFiles: [fileMetadata]\n        },\n        error: null\n      }\n    }\n\n    return { fileMetadata, error: null }\n  }\n\n  async uploadFile({\n    file,\n    bucketId,\n    id,\n    name\n  }: StorageUploadFileParams): Promise<StorageUploadFileResponse> {\n    const formData = new FormData()\n\n    formData.append('file[]', file)\n    formData.append('metadata[]', JSON.stringify({ id, name }))\n\n    const { error, fileMetadata } = await fetchUpload(this.url, formData, {\n      accessToken: this.accessToken,\n      adminSecret: this.adminSecret,\n      bucketId,\n      fileId: id,\n      name\n    })\n\n    if (error) {\n      return { fileMetadata: null, error }\n    }\n\n    if (fileMetadata && 'processedFiles' in fileMetadata) {\n      return {\n        fileMetadata: fileMetadata.processedFiles[0],\n        error: null\n      }\n    }\n\n    return { fileMetadata, error: null }\n  }\n\n  async getPresignedUrl(params: ApiGetPresignedUrlParams): Promise<ApiGetPresignedUrlResponse> {\n    try {\n      const { fileId } = params\n      const response = await fetch(`${this.url}/files/${fileId}/presignedurl`, {\n        method: 'GET',\n        headers: this.generateAuthHeaders()\n      })\n      if (!response.ok) {\n        throw new Error(await response.text())\n      }\n      const presignedUrl = await response.json()\n      return { presignedUrl, error: null }\n    } catch (error) {\n      return { presignedUrl: null, error: error as Error }\n    }\n  }\n\n  async delete(params: ApiDeleteParams): Promise<ApiDeleteResponse> {\n    try {\n      const { fileId } = params\n      const response = await fetch(`${this.url}/files/${fileId}`, {\n        method: 'DELETE',\n        headers: this.generateAuthHeaders()\n      })\n      if (!response.ok) {\n        throw new Error(await response.text())\n      }\n      return { error: null }\n    } catch (error) {\n      return { error: error as Error }\n    }\n  }\n\n  /**\n   * Set the access token to use for authentication.\n   *\n   * @param accessToken Access token\n   * @returns Hasura Storage API instance\n   */\n  setAccessToken(accessToken?: string): HasuraStorageApi {\n    this.accessToken = accessToken\n\n    return this\n  }\n\n  /**\n   * Set the admin secret to use for authentication.\n   *\n   * @param adminSecret Hasura admin secret\n   * @returns Hasura Storage API instance\n   */\n  setAdminSecret(adminSecret?: string): HasuraStorageApi {\n    this.adminSecret = adminSecret\n\n    return this\n  }\n\n  private generateAuthHeaders(): HeadersInit | undefined {\n    if (!this.adminSecret && !this.accessToken) {\n      return undefined\n    }\n\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n\n    return {\n      Authorization: `Bearer ${this.accessToken}`\n    }\n  }\n}\n","import { StorageImageTransformationParams } from '../types'\n\n/**\n * Appends image transformation parameters to the URL. If the URL already\n * contains query parameters, the transformation parameters are appended to\n * the existing query parameters.\n *\n * @internal\n * @param url - The URL to append the transformation parameters to.\n * @param params - The image transformation parameters.\n * @returns The URL with the transformation parameters appended.\n */\nexport default function appendImageTransformationParameters(\n  url: string,\n  params?: StorageImageTransformationParams\n): string {\n  if (!params || Object.keys(params).length === 0) {\n    return url\n  }\n\n  const urlObject = new URL(url)\n\n  // create an object with the transformation parameters by using the first\n  // character of the parameter name as the key\n  const imageTransformationParams = Object.entries(params).reduce(\n    (accumulator, [key, value]) => ({ ...accumulator, [key.charAt(0)]: value }),\n    {} as Record<string, any>\n  )\n\n  // set the query parameters in the URL object\n  Object.entries(imageTransformationParams).forEach(([key, value]) => {\n    if (!value) {\n      return\n    }\n\n    urlObject.searchParams.set(key, value)\n  })\n\n  return urlObject.toString()\n}\n","import { HasuraStorageApi } from './hasura-storage-api'\nimport {\n  appendImageTransformationParameters,\n  StorageDeleteParams,\n  StorageDeleteResponse,\n  StorageGetPresignedUrlParams,\n  StorageGetPresignedUrlResponse,\n  StorageGetUrlParams,\n  StorageUploadFileParams,\n  StorageUploadFileResponse,\n  StorageUploadFormDataParams,\n  StorageUploadFormDataResponse,\n  StorageUploadParams,\n  StorageUploadResponse\n} from './utils'\n\nexport interface NhostStorageConstructorParams {\n  /**\n   * Storage endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n/**\n * @alias Storage\n */\nexport class HasuraStorageClient {\n  readonly url: string\n  private api: HasuraStorageApi\n\n  constructor({ url, adminSecret }: NhostStorageConstructorParams) {\n    this.url = url\n    this.api = new HasuraStorageApi({ url })\n    this.setAdminSecret(adminSecret)\n  }\n\n  /**\n   * Use `nhost.storage.upload` to upload a file. \n   * \n   * It's possible to use [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) or [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) to upload a file. The `File` instance is only available in the browser while `FormData` with [`form-data`](https://www.npmjs.com/package/form-data) works both in the browser and in NodeJS (server).\n   * \n   * If no `bucketId` is specified the bucket `default` is used.\n   *\n   * @example\n   * \n   * Upload a file from a browser using `File`.\n   * \n   * ```ts\n   * await nhost.storage.upload({ file })\n   * ```\n   * \n   * Upload a file from a browser using `File` to a specific Bucket.\n   * \n    @example\n   * ```ts\n   * await nhost.storage.upload({ file, bucketId: '<Bucket-ID>' })\n   * ```\n   * \n   * Upload a file from a server using `FormData` with [`form-data`](https://www.npmjs.com/package/form-data).\n   *\n   * @example\n   * ```ts\n   * const fd = new FormData() \n   * fd.append('file', fs.createReadStream('./tests/assets/sample.pdf'))\n   * \n   * await storage.upload({\n   *   formData: fd\n   * })\n   * ```\n   * \n   * @docs https://docs.nhost.io/reference/javascript/storage/upload\n   */\n\n  async upload(params: StorageUploadFileParams): Promise<StorageUploadFileResponse>\n  async upload(params: StorageUploadFormDataParams): Promise<StorageUploadFormDataResponse>\n  async upload(params: StorageUploadParams): Promise<StorageUploadResponse> {\n    if ('file' in params) {\n      return this.api.uploadFile(params)\n    }\n\n    return this.api.uploadFormData(params)\n  }\n\n  /**\n   * Use `nhost.storage.getPublicUrl` to get the public URL of a file. The public URL can be used for un-authenticated users to access files. To access public files the `public` role must have permissions to select the file in the `storage.files` table.\n   *\n   * @example\n   * ```ts\n   * const publicUrl = nhost.storage.getPublicUrl({ fileId: '<File-ID>' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/get-public-url\n   */\n  getPublicUrl(params: StorageGetUrlParams): string {\n    const { fileId, ...imageTransformationParams } = params\n    return appendImageTransformationParameters(\n      `${this.url}/files/${fileId}`,\n      imageTransformationParams\n    )\n  }\n\n  /**\n   * Use `nhost.storage.getPresignedUrl` to get a presigned URL of a file. To get a presigned URL the user must have permission to select the file in the `storage.files` table.\n   *\n   * @example\n   * ```ts\n   * const { presignedUrl, error} = await nhost.storage.getPresignedUrl({ fileId: '<File-ID>' })\n   *\n   * if (error) {\n   *   throw error;\n   * }\n   *\n   * console.log('url: ', presignedUrl.url)\n   * console.log('expiration: ', presignedUrl.expiration)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/get-presigned-url\n   */\n  async getPresignedUrl(\n    params: StorageGetPresignedUrlParams\n  ): Promise<StorageGetPresignedUrlResponse> {\n    const { fileId, ...imageTransformationParams } = params\n    const { presignedUrl, error } = await this.api.getPresignedUrl(params)\n    if (error) {\n      return { presignedUrl: null, error }\n    }\n\n    if (!presignedUrl) {\n      return { presignedUrl: null, error: new Error('Invalid file id') }\n    }\n\n    const urlWithTransformationParams = appendImageTransformationParameters(\n      presignedUrl.url,\n      imageTransformationParams\n    )\n\n    return {\n      presignedUrl: {\n        ...presignedUrl,\n        url: urlWithTransformationParams\n      },\n      error: null\n    }\n  }\n\n  /**\n   * Use `nhost.storage.delete` to delete a file. To delete a file the user must have permissions to delete the file in the `storage.files` table. Deleting the file using `nhost.storage.delete()` will delete both the file and its metadata.\n   *\n   * @example\n   * ```ts\n   * const { error } = await nhost.storage.delete({ fileId: 'uuid' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/delete\n   */\n  async delete(params: StorageDeleteParams): Promise<StorageDeleteResponse> {\n    const { error } = await this.api.delete(params)\n    if (error) {\n      return { error }\n    }\n\n    return { error: null }\n  }\n\n  /**\n   * Use `nhost.storage.setAccessToken` to a set an access token to be used in subsequent storage requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.storage.setAccessToken('some-access-token')\n   * ```\n   *\n   * @param accessToken Access token\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/set-access-token\n   */\n  setAccessToken(accessToken?: string): HasuraStorageClient {\n    this.api.setAccessToken(accessToken)\n\n    return this\n  }\n\n  /**\n   * Use `nhost.storage.adminSecret` to set the admin secret to be used for subsequent storage requests. This is useful if you want to run storage in \"admin mode\".\n   *\n   * @example\n   * ```ts\n   * nhost.storage.setAdminSecret('some-admin-secret')\n   * ```\n   *\n   * @param adminSecret Hasura admin secret\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/set-admin-secret\n   */\n  setAdminSecret(adminSecret?: string): HasuraStorageClient {\n    this.api.setAdminSecret(adminSecret)\n\n    return this\n  }\n}\n","import FormData from 'form-data'\nimport { assign, createMachine } from 'xstate'\nimport { FileUploadConfig, StorageErrorPayload } from '../utils'\nimport { fetchUpload } from '../utils/upload'\n\nexport type FileUploadContext = {\n  progress: number | null\n  loaded: number\n  error: StorageErrorPayload | null\n  id?: string\n  bucketId?: string\n  file?: File\n}\n\nexport type FileUploadEventPayload = {}\nexport type FileUploadEvents =\n  | { type: 'ADD'; file: File; id?: string; bucketId?: string; name?: string }\n  | ({\n      type: 'UPLOAD'\n      file?: File\n      id?: string\n      name?: string\n      bucketId?: string\n    } & FileUploadConfig)\n  | { type: 'UPLOAD_PROGRESS'; progress: number; loaded: number; additions: number }\n  | { type: 'UPLOAD_DONE'; id: string; bucketId: string }\n  | { type: 'UPLOAD_ERROR'; error: StorageErrorPayload }\n  | { type: 'CANCEL' }\n  | { type: 'DESTROY' }\n\nexport const INITIAL_FILE_CONTEXT: FileUploadContext = {\n  progress: null,\n  loaded: 0,\n  error: null,\n  bucketId: undefined,\n  file: undefined,\n  id: undefined\n}\n\nexport type FileUploadMachine = ReturnType<typeof createFileUploadMachine>\nexport const createFileUploadMachine = () =>\n  createMachine(\n    {\n      predictableActionArguments: true,\n      schema: {\n        context: {} as FileUploadContext,\n        events: {} as FileUploadEvents\n      },\n      tsTypes: {} as import('./file-upload.typegen').Typegen0,\n      context: { ...INITIAL_FILE_CONTEXT },\n      initial: 'idle',\n      on: {\n        DESTROY: { actions: 'sendDestroy', target: 'stopped' }\n      },\n      states: {\n        idle: {\n          on: {\n            ADD: { actions: 'addFile' },\n            UPLOAD: { cond: 'hasFile', target: 'uploading' }\n          }\n        },\n        uploading: {\n          entry: 'resetProgress',\n          on: {\n            UPLOAD_PROGRESS: { actions: ['incrementProgress', 'sendProgress'] },\n            UPLOAD_DONE: 'uploaded',\n            UPLOAD_ERROR: 'error',\n            CANCEL: 'idle'\n          },\n          invoke: { src: 'uploadFile' }\n        },\n        uploaded: {\n          entry: ['setFileMetadata', 'sendDone'],\n          on: {\n            ADD: { actions: 'addFile', target: 'idle' },\n            UPLOAD: { actions: 'resetContext', target: 'uploading' }\n          }\n        },\n        error: {\n          entry: ['setError', 'sendError'],\n          on: {\n            ADD: { actions: 'addFile', target: 'idle' },\n            UPLOAD: { actions: 'resetContext', target: 'uploading' }\n          }\n        },\n        stopped: { type: 'final' }\n      }\n    },\n    {\n      guards: {\n        hasFile: (context, event) => !!context.file || !!event.file\n      },\n\n      actions: {\n        incrementProgress: assign({\n          loaded: (_, { loaded }) => loaded,\n          progress: (_, { progress }) => progress\n        }),\n        setFileMetadata: assign({\n          id: (_, { id }) => id,\n          bucketId: (_, { bucketId }) => bucketId,\n          progress: (_) => 100\n        }),\n        setError: assign({ error: (_, { error }) => error }),\n        sendProgress: () => {},\n        sendError: () => {},\n        sendDestroy: () => {},\n        sendDone: () => {},\n        resetProgress: assign({ progress: (_) => null, loaded: (_) => 0 }),\n        resetContext: assign((_) => INITIAL_FILE_CONTEXT),\n        addFile: assign({\n          file: (_, { file }) => file,\n          bucketId: (_, { bucketId }) => bucketId,\n          id: (_, { id }) => id\n        })\n      },\n      services: {\n        uploadFile: (context, event) => (callback) => {\n          const file = (event.file || context.file)!\n          const data = new FormData()\n          data.append('file[]', file)\n\n          let currentLoaded = 0\n\n          fetchUpload(event.url, data, {\n            fileId: event.id || context.id,\n            bucketId: event.bucketId || context.bucketId,\n            accessToken: event.accessToken,\n            adminSecret: event.adminSecret,\n            name: event.name || file.name,\n            onUploadProgress: (event) => {\n              const loaded = event.total ? Math.round((event.loaded * file.size!) / event.total) : 0\n              const additions = loaded - currentLoaded\n              currentLoaded = loaded\n              callback({\n                type: 'UPLOAD_PROGRESS',\n                progress: event.total ? Math.round((loaded * 100) / event.total) : 0,\n                loaded,\n                additions\n              })\n            }\n          }).then(({ fileMetadata, error }) => {\n            if (error) {\n              callback({ type: 'UPLOAD_ERROR', error })\n            }\n            if (fileMetadata && !('processedFiles' in fileMetadata)) {\n              const { id, bucketId } = fileMetadata\n              callback({ type: 'UPLOAD_DONE', id, bucketId })\n            }\n\n            if (fileMetadata && 'processedFiles' in fileMetadata) {\n              // TODO: Add support for multiple files\n              const { id, bucketId } = fileMetadata.processedFiles[0]\n              callback({ type: 'UPLOAD_DONE', id, bucketId })\n            }\n          })\n\n          return () => {}\n        }\n      }\n    }\n  )\n","import { actions, ActorRefFrom, assign, createMachine, send, spawn } from 'xstate'\n\nimport { FileUploadConfig } from '../utils'\n\nimport { createFileUploadMachine, FileUploadMachine, INITIAL_FILE_CONTEXT } from './file-upload'\n\nconst { pure, sendParent } = actions\n\nexport type FileItemRef = ActorRefFrom<FileUploadMachine>\n\nexport type AnyFileList = File | File[] | FileList\n\nexport type MultipleFilesUploadContext = {\n  progress: number | null\n  files: FileItemRef[]\n  loaded: number\n  total: number\n}\n\nexport type MultipleFilesUploadEvents =\n  | { type: 'ADD'; files: AnyFileList; bucketId?: string }\n  | ({\n      type: 'UPLOAD'\n      files?: AnyFileList\n      bucketId?: string\n    } & FileUploadConfig)\n  | { type: 'UPLOAD_PROGRESS'; additions: number }\n  | { type: 'UPLOAD_DONE' }\n  | { type: 'UPLOAD_ERROR' }\n  | { type: 'CANCEL' }\n  | { type: 'REMOVE' }\n  | { type: 'CLEAR' }\n\nexport type MultipleFilesUploadMachine = ReturnType<typeof createMultipleFilesUploadMachine>\n\nexport const createMultipleFilesUploadMachine = () => {\n  return createMachine(\n    {\n      id: 'files-list',\n      schema: {\n        context: {} as MultipleFilesUploadContext,\n        events: {} as MultipleFilesUploadEvents\n      },\n      tsTypes: {} as import('./multiple-files-upload.typegen').Typegen0,\n      predictableActionArguments: true,\n      context: {\n        progress: null,\n        files: [],\n        loaded: 0,\n        total: 0\n      },\n      initial: 'idle',\n      on: {\n        UPLOAD: { cond: 'hasFileToDownload', actions: 'addItem', target: 'uploading' },\n        ADD: { actions: 'addItem' },\n        REMOVE: { actions: 'removeItem' }\n      },\n      states: {\n        idle: {\n          entry: ['resetProgress', 'resetLoaded', 'resetTotal'],\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        },\n        uploading: {\n          entry: ['upload', 'startProgress', 'resetLoaded', 'resetTotal'],\n          on: {\n            UPLOAD_PROGRESS: { actions: ['incrementProgress'] },\n            UPLOAD_DONE: [\n              { cond: 'isAllUploaded', target: 'uploaded' },\n              { cond: 'isAllUploadedOrError', target: 'error' }\n            ],\n            UPLOAD_ERROR: [\n              { cond: 'isAllUploaded', target: 'uploaded' },\n              { cond: 'isAllUploadedOrError', target: 'error' }\n            ],\n            CANCEL: { actions: 'cancel', target: 'idle' }\n          }\n        },\n        uploaded: {\n          entry: 'setUploaded',\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        },\n        error: {\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        }\n      }\n    },\n    {\n      guards: {\n        hasFileToDownload: (context, event) =>\n          context.files.some((ref) => ref.getSnapshot()!.matches('idle')) || !!event.files,\n        isAllUploaded: (context) =>\n          context.files.every((item) => item.getSnapshot()?.matches('uploaded')),\n        isAllUploadedOrError: (context) =>\n          context.files.every((item) => {\n            const snap = item.getSnapshot()\n            return snap?.matches('error') || snap?.matches('uploaded')\n          })\n      },\n\n      actions: {\n        incrementProgress: assign((context, event) => {\n          const loaded: number = context.loaded + event.additions\n          const progress = Math.round((loaded * 100) / context.total)\n          return { ...context, loaded, progress }\n        }),\n        setUploaded: assign({\n          progress: (_) => 100,\n          loaded: ({ files }) =>\n            files\n              .map((ref) => ref.getSnapshot()!)\n              .filter((snap) => snap.matches('uploaded'))\n              .reduce((agg, curr) => agg + curr.context.file?.size!, 0)\n        }),\n        resetTotal: assign({\n          total: ({ files }) =>\n            files\n              .map((ref) => ref.getSnapshot()!)\n              .filter((snap) => !snap.matches('uploaded'))\n              .reduce((agg, curr) => agg + curr.context.file?.size!, 0)\n        }),\n        resetLoaded: assign({ loaded: (_) => 0 }),\n        startProgress: assign({ progress: (_) => 0 }),\n        resetProgress: assign({ progress: (_) => null }),\n        addItem: assign((context, { files, bucketId }) => {\n          const additions = files\n            ? Array.isArray(files)\n              ? files // File[]\n              : 'item' in files // FileList\n              ? Array.from(files)\n              : [files] // File\n            : [] // No file\n          const total = context.total + additions.reduce((agg, curr) => agg + curr.size, 0)\n          const progress = Math.round((context.loaded * 100) / total)\n          return {\n            files: [\n              ...context.files,\n              ...additions.map((file) =>\n                spawn(\n                  createFileUploadMachine()\n                    .withConfig({\n                      actions: {\n                        sendProgress: sendParent((_, { additions }) => ({\n                          type: 'UPLOAD_PROGRESS',\n                          additions\n                        })),\n                        sendDone: sendParent('UPLOAD_DONE'),\n                        sendError: sendParent('UPLOAD_ERROR'),\n                        sendDestroy: sendParent('REMOVE')\n                      }\n                    })\n                    .withContext({ ...INITIAL_FILE_CONTEXT, file, bucketId }),\n                  { sync: true }\n                )\n              )\n            ],\n            total,\n            loaded: context.loaded,\n            progress\n          }\n        }),\n        removeItem: assign({\n          files: (context) =>\n            context.files.filter((ref) => {\n              const stopped = ref.getSnapshot()?.matches('stopped')\n              if (stopped) {\n                ref.stop?.()\n              }\n              return !stopped\n            })\n        }),\n        clearList: pure((context) =>\n          context.files.map((ref) => send({ type: 'DESTROY' }, { to: ref.id }))\n        ),\n        upload: pure((context, event) => context.files.map((ref) => send(event, { to: ref.id }))),\n        cancel: pure((context) =>\n          context.files.map((ref) => send({ type: 'CANCEL' }, { to: ref.id }))\n        )\n      }\n    }\n  )\n}\n","import { InterpreterFrom } from 'xstate'\n\nimport { FileItemRef, FileUploadMachine } from '../machines'\nimport { FileUploadConfig, StorageActionErrorState, StorageUploadFileParams } from '../utils'\n\nexport interface UploadProgressState {\n  /**\n   * Returns `true` when the file is being uploaded.\n   */\n  isUploading: boolean\n  /**\n   * Returns the progress of the upload, from 0 to 100. Returns null if the upload has not started yet.\n   */\n  progress: number | null\n}\n\nexport interface UploadFileHandlerResult extends StorageActionErrorState {\n  /**\n   * Returns `true` when the file has been successfully uploaded.\n   */\n  isUploaded: boolean\n  /**\n   * Returns the id of the file.\n   */\n  id?: string\n  /**\n   * Returns the bucket id.\n   */\n  bucketId?: string\n  /**\n   * Returns the name of the file.\n   */\n  name?: string\n}\n\nexport interface FileUploadState extends UploadFileHandlerResult, UploadProgressState {}\n\nexport const uploadFilePromise = async (\n  params: FileUploadConfig & Partial<StorageUploadFileParams>,\n  interpreter: FileItemRef | InterpreterFrom<FileUploadMachine>\n): Promise<UploadFileHandlerResult> =>\n  new Promise<UploadFileHandlerResult>((resolve) => {\n    interpreter.send({\n      type: 'UPLOAD',\n      ...params\n    })\n    interpreter.subscribe((s) => {\n      if (s.matches('error')) {\n        resolve({\n          error: s.context.error,\n          isError: true,\n          isUploaded: false\n        })\n      } else if (s.matches('uploaded')) {\n        resolve({\n          error: null,\n          isError: false,\n          isUploaded: true,\n          id: s.context.id,\n          bucketId: s.context.id,\n          name: s.context.file?.name\n        })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { AnyFileList, FileItemRef, MultipleFilesUploadMachine } from '../machines'\nimport { FileUploadConfig } from '../utils'\n\nexport interface MultipleUploadProgressState {\n  /**\n   * Returns `true` when the files are being uploaded.\n   */\n  isUploading: boolean\n  /**\n   * Returns the overall progress of the upload, from 0 to 100. Returns null if the upload has not started yet.\n   */\n  progress: number | null\n}\n\nexport interface MultipleFilesHandlerResult {\n  /**\n   * The list of file uploads. The properties can be accessed through `item.getSnapshot()` of with the `useFileUploadItem` hook.\n   */\n  files: FileItemRef[]\n  /**\n   * Returns `true` when all upload request are processed, but at least one of them has failed.\n   */\n  isError: boolean\n  /**\n   * Returns the list of file uploads that have failed\n   */\n  errors: FileItemRef[]\n}\n\nexport interface MultipleFilesUploadState\n  extends MultipleFilesHandlerResult,\n    MultipleUploadProgressState {\n  /**\n   * Returns `true` when all the files have been successfully uploaded.\n   */\n  isUploaded: boolean\n}\n\nexport type UploadMultipleFilesActionParams = {\n  files?: AnyFileList\n  bucketId?: string\n}\n\nexport const uploadMultipleFilesPromise = async (\n  params: FileUploadConfig & UploadMultipleFilesActionParams,\n  service: InterpreterFrom<MultipleFilesUploadMachine>\n): Promise<MultipleFilesHandlerResult> =>\n  new Promise((resolve) => {\n    service.send({\n      type: 'UPLOAD',\n      ...params,\n      files: params.files\n    })\n    service.onTransition((s) => {\n      if (s.matches('error')) {\n        resolve({\n          errors: s.context.files.filter((ref) => ref.getSnapshot()?.context.error),\n          isError: true,\n          files: []\n        })\n      } else if (s.matches('uploaded')) {\n        resolve({ errors: [], isError: false, files: s.context.files })\n      }\n    })\n  })\n"],"names":["fetch","fetchPonyfill","fetchUpload","backendUrl","data","accessToken","name","fileId","bucketId","adminSecret","onUploadProgress","initialHeaders","headers","url","response","responseData","_a","e","resolve","xhr","_b","_e","_d","_c","key","value","HasuraStorageApi","formData","error","fileMetadata","file","id","FormData","params","appendImageTransformationParameters","urlObject","imageTransformationParams","accumulator","HasuraStorageClient","presignedUrl","urlWithTransformationParams","INITIAL_FILE_CONTEXT","createFileUploadMachine","createMachine","context","event","assign","_","loaded","progress","callback","currentLoaded","additions","pure","sendParent","actions","createMultipleFilesUploadMachine","ref","item","snap","files","agg","curr","total","spawn","stopped","send","uploadFilePromise","interpreter","uploadMultipleFilesPromise","service"],"mappings":"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"}