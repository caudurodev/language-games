import { VanillaNhostClient as k, NHOST_REFRESH_TOKEN_KEY as f, NhostProvider as N, NhostClient as m } from "@nhost/react";
export * from "@nhost/react";
import "isomorphic-unfetch";
import i from "js-cookie";
import { waitFor as v } from "xstate/lib/waitFor";
const h = "nhostSession", g = (t) => {
  const e = t && "auth" in t ? t.auth.getSession() : t;
  if (!e) {
    i.remove(h);
    return;
  }
  const { refreshToken: r, ...o } = e, n = /* @__PURE__ */ new Date();
  n.setSeconds(n.getSeconds() + e.accessTokenExpiresIn - 60), i.set(h, JSON.stringify(o), {
    sameSite: "strict",
    expires: n
  });
}, w = async (t, e) => {
  let r;
  typeof t == "string" ? (console.warn(
    "Deprecation Notice: Backend URL is no longer supported. Please use subdomain + region or individual service URLs."
  ), r = {
    backendUrl: t
  }) : r = {
    ...t
  };
  const o = new k({
    ...r,
    clientStorageType: "custom",
    clientStorage: {
      getItem: (s) => {
        var S;
        const a = s === f ? "refreshToken" : s, l = e.query[a], u = (S = i.get(s)) != null ? S : null, p = e.req.cookies[s];
        return typeof l == "string" ? l : u != null ? u : p;
      },
      setItem: (s, a) => {
        i.set(s, a, { httpOnly: !1, sameSite: "strict", expires: 30 });
      },
      removeItem: (s) => {
        i.remove(s);
      }
    },
    start: !1,
    autoRefreshToken: !1,
    autoSignIn: !0
  }), n = e.req.cookies[h], c = e.req.cookies[f], d = n && c && { ...JSON.parse(n), refreshToken: c };
  return o.auth.client.start({ initialSession: d }), await v(
    o.auth.client.interpreter,
    (s) => !s.hasTag("loading")
  ), o;
}, E = async (t, e) => {
  const r = await w(t, e), { accessToken: o, refreshToken: n, user: c } = r.auth.client.interpreter.getSnapshot().context;
  return r.auth.isAuthenticated() ? {
    accessToken: o.value,
    accessTokenExpiresIn: (o.expiresAt.getTime() - Date.now()) / 1e3,
    refreshToken: n.value,
    user: c
  } : null;
}, O = N, T = typeof window != "undefined";
class R extends m {
  constructor(e) {
    super({
      ...e,
      autoSignIn: T && e.autoSignIn,
      autoRefreshToken: T && e.autoRefreshToken,
      clientStorageType: "cookie"
    }), this.auth.onAuthStateChanged(() => {
      g(this);
    }), this.auth.onTokenChanged(g);
  }
}
export {
  R as NhostClient,
  O as NhostNextProvider,
  w as createServerSideClient,
  E as getNhostSession
};
//# sourceMappingURL=index.esm.js.map
